{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","urlSearchParams","URLSearchParams","window","location","search","params","Object","fromEntries","entries","useState","videoSrc","setVideoSrc","ffmpeg","createFFmpeg","log","corePath","currentSource","addEventListener","evt","source","doTranscode","data","images","a","length","frameSpeed","fileName","filename","load","i","fetchFile","FS","last","run","videoUrl","URL","createObjectURL","Blob","buffer","type","postMessage","className","id","width","height","src","controls","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6RA4DeA,MAtDf,WACE,IAAMC,EAAkB,IAAIC,gBAAgBC,OAAOC,SAASC,QACtDC,EAASC,OAAOC,YAAYP,EAAgBQ,WAClD,EAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACMC,EAASC,uBAAa,CAC1BC,KAAK,EACLC,SAAU,8DAGRC,EAAgB,KACpBd,OAAOe,iBAAiB,WAAW,SAACC,GAClCF,EAAgBE,EAAIC,OACfT,GACHU,EAAYF,EAAIG,SAEjB,GAEH,IAAMD,EAAW,uCAAG,WAAOE,GAAP,2BAAAC,EAAA,0DACdD,EAAOE,OADO,wBAEVC,EAAa,IAAMH,EAAOE,OAAS,GACnCE,GAAiB,OAANrB,QAAM,IAANA,OAAA,EAAAA,EAAQsB,WAAY,uBAHrB,SAIVf,EAAOgB,OAJG,OAKPC,EAAI,EALG,YAKAA,EAAIP,EAAOE,QALX,6BAMdZ,EANc,oBAMiBiB,EANjB,kBAMgCC,oBAAUR,EAAOO,IANjD,yBAMPE,GANO,UAMJ,YANI,mBAKmBF,GAAK,EALxB,8BAQVG,EAAOV,EAAOE,OAAS,EARb,KAShBZ,EATgB,oBASeoB,EAAO,EATtB,kBASqCF,oBAAUR,EAAOU,IATtD,gCASTD,GATS,UASN,YATM,qBAUVnB,EAAOqB,IAAI,aAAc,KAAM,gBAAiB,OAAQ,KAAM,QAAS,MAAvE,iBAAwFR,EAAxF,UAA4G,OAAQ,UAAW,WAAY,UAA3I,UAAyJC,EAAzJ,SAVU,QAahB,IADML,EAAOT,EAAOmB,GAAG,WAAV,UAAyBL,EAAzB,SACJG,EAAI,EAAGA,EAAIP,EAAOE,OAAQK,GAAK,EACtCjB,EAAOmB,GAAG,SAAV,eAA4BF,EAA5B,SAEFjB,EAAOmB,GAAG,SAAV,eAA4BC,EAAO,EAAnC,SACME,EAAWC,IAAIC,gBAAgB,IAAIC,KAAK,CAAChB,EAAKiB,QAAS,CAAEC,KAAM,eACrE5B,EAAYuB,GACZlB,EAAcwB,YAAY,CACxBN,YACE,KArBY,4CAAH,sDAyBjB,OACE,sBAAKO,UAAU,MAAf,UACE,qBAAKC,GAAG,WAAR,SACChC,GAAY,cAEb,qBAAKgC,GAAG,WAAR,SACE,uBAAOC,MAAM,MAAMC,OAAO,MAAMC,IAAKnC,EAAUoC,UAAQ,UC1C3CC,QACW,cAA7B7C,OAAOC,SAAS6C,UAEe,UAA7B9C,OAAOC,SAAS6C,UAEhB9C,OAAOC,SAAS6C,SAASC,MACvB,2DCZNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9c0bbdfe.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { createFFmpeg, fetchFile } from '@ffmpeg/ffmpeg';\n\nimport './App.css';\n\n\nfunction App() {\n  const urlSearchParams = new URLSearchParams(window.location.search);\n  const params = Object.fromEntries(urlSearchParams.entries());\n  const [videoSrc, setVideoSrc] = useState('');\n  const ffmpeg = createFFmpeg({\n    log: true,\n    corePath: 'https://unpkg.com/@ffmpeg/core@0.10.0/dist/ffmpeg-core.js'\n  });\n\n  let currentSource = null\n  window.addEventListener('message', (evt) => {\n    currentSource = evt.source\n    if (!videoSrc) {\n      doTranscode(evt.data)\n    }\n  }, false);\n\n  const doTranscode = async (images) => {\n    if (images.length) {\n      const frameSpeed = 30 * (images.length + 1);\n      const fileName = params?.filename || 'Paper_Wallet__QRCode'\n      await ffmpeg.load();\n      for (let i = 0; i < images.length; i += 1) {\n        ffmpeg.FS('writeFile', `img00${i}.png`, await fetchFile(images[i]));\n      }\n      const last = images.length - 1;\n      ffmpeg.FS('writeFile', `img00${last + 1}.png`, await fetchFile(images[last]));\n      await ffmpeg.run('-framerate', '24', '-pattern_type', 'glob', '-i', '*.png', '-vf', `setpts=${frameSpeed}.0*PTS`, '-c:v', 'libx264', '-pix_fmt', 'yuv420p', `${fileName}.mp4`);\n\n      const data = ffmpeg.FS('readFile', `${fileName}.mp4`);\n      for (let i = 0; i < images.length; i += 1) {\n        ffmpeg.FS('unlink', `img00${i}.png`);\n      }\n      ffmpeg.FS('unlink', `img00${last + 1}.png`);\n      const videoUrl = URL.createObjectURL(new Blob([data.buffer], { type: 'video/mp4' }));\n      setVideoSrc(videoUrl);\n      currentSource.postMessage({\n        videoUrl,\n      } , \"*\");\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <div id=\"videourl\">\n      {videoSrc || 'inprocess'}\n      </div>\n      <div id=\"videotag\">\n        <video width=\"320\" height=\"240\" src={videoSrc} controls />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}