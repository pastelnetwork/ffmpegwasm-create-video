{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","urlSearchParams","URLSearchParams","window","location","search","params","Object","fromEntries","entries","useState","videoSrc","setVideoSrc","ffmpeg","createFFmpeg","log","corePath","currentSource","addEventListener","evt","source","doTranscode","data","imgs","a","length","fileName","filename","load","images","concat","Array","fill","i","fetchFile","FS","run","videoUrl","URL","createObjectURL","Blob","buffer","type","postMessage","error","className","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"qSAuDeA,MAlDf,WACE,IAAMC,EAAkB,IAAIC,gBAAgBC,OAAOC,SAASC,QACtDC,EAASC,OAAOC,YAAYP,EAAgBQ,WAClD,EAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACMC,EAASC,uBAAa,CAC1BC,KAAK,EACLC,SAAU,8DAGRC,EAAgB,KACpBd,OAAOe,iBAAiB,WAAW,SAACC,GAClCF,EAAgBE,EAAIC,OACfT,GACHU,EAAYF,EAAIG,SAEjB,GAEH,IAAMD,EAAW,uCAAG,WAAOE,GAAP,2BAAAC,EAAA,0DACdD,EAAKE,OADS,iCAGRC,GAAiB,OAANpB,QAAM,IAANA,OAAA,EAAAA,EAAQqB,WAAY,uBAHvB,SAIRd,EAAOe,OAJC,OAKRC,GAAS,MAAGC,OAAH,oBAAc,IAAIC,MAAM,GAAGC,KAAKT,KACtCU,EAAI,EANC,YAMEA,EAAIJ,EAAOJ,QANb,6BAOZZ,EAPY,oBAOmBoB,EAPnB,kBAOkCC,oBAAUL,EAAOI,IAPnD,yBAOLE,GAPK,UAOF,YAPE,mBAMqBF,GAAK,EAN1B,wCASRpB,EAAOuB,IAAI,gBAAiB,OAAQ,KAAM,IAAK,KAAM,QAAS,OAAQ,UAAW,KAAM,IAAK,WAAY,UAAxG,UAAsHV,EAAtH,SATQ,QAYd,IADMJ,EAAOT,EAAOsB,GAAG,WAAV,UAAyBT,EAAzB,SACJO,EAAI,EAAGA,EAAIJ,EAAOJ,OAAQQ,GAAK,EACtCpB,EAAOsB,GAAG,SAAV,eAA4BF,EAA5B,SAEII,EAAWC,IAAIC,gBAAgB,IAAIC,KAAK,CAAClB,EAAKmB,QAAS,CAAEC,KAAM,eACrE9B,EAAYyB,GACZpB,EAAc0B,YAAY,CACxBN,WACAO,MAAO,MACL,KApBU,kDAsBd3B,EAAc0B,YAAY,CACxBN,SAAU,GACVO,MAAO,kBACL,KAzBU,0DAAH,sDA8BjB,OAAO,qBAAKC,UAAU,MAAf,qCCxCWC,QACW,cAA7B3C,OAAOC,SAAS2C,UAEe,UAA7B5C,OAAOC,SAAS2C,UAEhB5C,OAAOC,SAAS2C,SAASC,MACvB,2DCZNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAhB,GACLiB,QAAQjB,MAAMA,EAAMkB,c","file":"static/js/main.c81c9288.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { createFFmpeg, fetchFile } from '@ffmpeg/ffmpeg';\r\n\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const urlSearchParams = new URLSearchParams(window.location.search);\r\n  const params = Object.fromEntries(urlSearchParams.entries());\r\n  const [videoSrc, setVideoSrc] = useState('');\r\n  const ffmpeg = createFFmpeg({\r\n    log: true,\r\n    corePath: 'https://unpkg.com/@ffmpeg/core@0.10.0/dist/ffmpeg-core.js'\r\n  });\r\n\r\n  let currentSource = null\r\n  window.addEventListener('message', (evt) => {\r\n    currentSource = evt.source\r\n    if (!videoSrc) {\r\n      doTranscode(evt.data)\r\n    }\r\n  }, false);\r\n\r\n  const doTranscode = async (imgs) => {\r\n    if (imgs.length) {\r\n      try {\r\n        const fileName = params?.filename || 'Paper_Wallet__QRCode'\r\n        await ffmpeg.load();\r\n        const images = [].concat(... new Array(3).fill(imgs));\r\n        for (let i = 0; i < images.length; i += 1) {\r\n          ffmpeg.FS('writeFile', `img00${i}.png`, await fetchFile(images[i]));\r\n        }\r\n        await ffmpeg.run('-pattern_type', 'glob', '-r', '1', '-i', '*.png', '-c:v', 'libx264', '-r', '2', '-pix_fmt', 'yuv420p', `${fileName}.mp4`);\r\n  \r\n        const data = ffmpeg.FS('readFile', `${fileName}.mp4`);\r\n        for (let i = 0; i < images.length; i += 1) {\r\n          ffmpeg.FS('unlink', `img00${i}.png`);\r\n        }\r\n        const videoUrl = URL.createObjectURL(new Blob([data.buffer], { type: 'video/mp4' }));\r\n        setVideoSrc(videoUrl);\r\n        currentSource.postMessage({\r\n          videoUrl,\r\n          error: null\r\n        } , \"*\");\r\n      } catch {\r\n        currentSource.postMessage({\r\n          videoUrl: '',\r\n          error: 'creating error'\r\n        } , \"*\");\r\n      }\r\n    }\r\n  }\r\n\r\n  return <div className=\"App\">Creating QR Code Video</div>;\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}